What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, you create the project space in git. You need to do this so that git knows what files need to be tracked and where.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an in-between area that allows a user to pick and choose which files are commited together. This offers more control over what gets grouped together and how you can organize your commits, helping keep things more organized and logical.

How can you use the staging area to make sure you have one commit per logical change?
You can look at what is in the staging area before you commit, and make sure that all the things that are going to be commited follow with the same logic. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful when you are making changes that go further than just fixing bugs, editing documentation, or other "linear" changes. When you make changes that are experimental or additional features but want to keep a working copy of the current project, a branch can allow that to happen.

How do the diagrams help you visualize the branch structure?
Diagrams help me visualize the branch structure because it allows me to see how branches relate to each other, the child-parent relationships, and how some commits could get lost if they aren't made into their own branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together takes the updates made in both branches and combines them into one. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The automatic merging is convenient and saves time. Manually merging will allow the most control over what actually is changing and why. 